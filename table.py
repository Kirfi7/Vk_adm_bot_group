import gspread

from cfg import rank_up, SCOPE
from oauth2client.service_account import ServiceAccountCredentials

creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", SCOPE)
client = gspread.authorize(creds)
sheet = client.open("ADMINS RED1").worksheet("–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
punish = client.open("ADMINS RED1").worksheet("–õ–æ–≥–∏ –≤—ã–≥–æ–≤–æ—Ä–æ–≤")


def get_default_info(array: list) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ"""
    return f"üîë –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üîë\n" \
           f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {array[1]}\n" \
           f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {array[2]}\n" \
           f"–î–æ–ø. –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {array[3]}\n" \
           f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤: {array[12]}\n" \
           f"\nüìÖ –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ –¥–Ω–∏ üìÖ\n" \
           f"–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {array[4]}\n" \
           f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: {array[11]}\n" \
           f"–î–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è: {array[18]}\n" \
           f"–í—Å–µ–≥–æ –¥–Ω–µ–π –Ω–∞ –∞–¥–º–∏–Ω-–ø–æ—Å—Ç—É: {array[19]}\n" \
           f"\n‚õîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è ‚õîÔ∏è\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {array[14]}/3\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ–≤: {array[15]}/2\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–Ω—ã—Ö: {array[16]}/2\n\n" \
           f"‚úÖ –û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {array[17]}\n"


def get_info_about_rank(array: list) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_lvl = array[12]

    rank_standards = {
        "1": {"days": 14, "reports": 5000, "this_rank": "–ú–ª–∞–¥—à–µ–≥–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"},
        "2": {"days": 21, "reports": 7500, "this_rank": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–°—Ç–∞—Ä—à–µ–≥–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"},
        "2.5": {"days": 30, "reports": 10000, "this_rank": "–°—Ç–∞—Ä—à–µ–≥–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"},
        "3": {"days": 40, "reports": 25000, "this_rank": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–°—Ç–∞—Ä—à–µ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
    }

    if float(admin_lvl) < 4:
        reports = int(array[17])
        up_days = int(array[18])
        punishes = [int(array[14]), int(array[15]), int(array[16])]

        t = f"–° {rank_standards[admin_lvl]['this_rank']} –Ω–∞ {rank_standards[admin_lvl]['next_rank']}:"

        days_by_lvl = int(rank_standards[admin_lvl]['days'])
        reps_by_lvl = int(rank_standards[admin_lvl]['reports'])

        if days_by_lvl > up_days and reps_by_lvl > reports:
            return rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), (days_by_lvl - up_days), punishes, 0, t)

        elif days_by_lvl > up_days and reps_by_lvl <= reports:
            return rank_up(reps_by_lvl, days_by_lvl, 0, (days_by_lvl - up_days), punishes, 0, t)

        elif days_by_lvl <= up_days and reps_by_lvl > reports:
            return rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), 0, punishes, 0, t)

        else:
            return rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), 0, punishes, 1, t)
    else:
        return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω-—É—Ä–æ–≤–µ–Ω—å!"


def punishment(nick_name: str, is_big=None) -> str:
    array = punish.findall(nick_name, in_column=1)
    rows = list(map(lambda el: el.row, array))

    if len(rows) > 40 and is_big is True:
        rows = rows[-40:]
    else:
        rows = rows[-10:]

    text = ""
    for row in rows:
        st = punish.row_values(row)
        text += f"{st[5]} | {st[2]} {st[3].lower()} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {st[4]}\n–ü—Ä–∏—á–∏–Ω–∞: {st[1]} by {st[6]}\n"

    return text
