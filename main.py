import time

import vk_api
import gspread

import cfg
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from oauth2client.service_account import ServiceAccountCredentials

# from pprint import pprint

creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", cfg.SCOPE)
client = gspread.authorize(creds)
sheet = client.open("ADMINS RED1").sheet1

# row = sheet.row_values(3)
#
# data = sheet.get_all_records()  # Get a list of all records
#
# row = sheet.row_values(3)  # Get a specific row
# col = sheet.col_values(3)  # Get a specific column
# cell = sheet.cell(1,2).value  # Get the value of a specific cell
#
# insertRow = ["hello", 5, "red", "blue"]
# sheet.add_rows(insertRow, 4)  # Insert the list as a row at index 4
#
# sheet.update_cell(2,2, "CHANGED")  # Update one cell
#
# numRows = sheet.row_count  # Get the number of rows in the sheet


def sender(for_user_id, message_text):
    vk_session.method("messages.send", {"user_id": for_user_id, "message": message_text, "random_id": 0})


def chat_sender(for_chat_id, message_text):
    vk_session.method("messages.send", {"chat_id": for_chat_id, "message": message_text, "random_id": 0})


def access(from_user_id):
    ids_column = sheet.col_values(7)
    column_number = 0
    for i in ids_column:
        column_number += 1
        if str(i) == str(from_user_id):
            return column_number, 1
    return 0, 0


def get_default_info(array):
    return f"üîë –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üîë\n" \
           f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {array[1]}\n" \
           f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {array[2]}\n" \
           f"–î–æ–ø. –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {array[3]}\n" \
           f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤: {array[12]}\n" \
           f"\nüìÖ –í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ –¥–Ω–∏ üìÖ\n" \
           f"–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {array[4]}\n" \
           f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: {array[11]}\n" \
           f"–î–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è: {array[18]}\n" \
           f"–í—Å–µ–≥–æ –¥–Ω–µ–π –Ω–∞ –∞–¥–º–∏–Ω-–ø–æ—Å—Ç—É: {array[19]}\n" \
           f"\n‚õîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è ‚õîÔ∏è\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {array[14]}/3\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ–≤: {array[15]}/2\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–Ω—ã—Ö: {array[16]}/2\n\n" \
           f"‚úÖ –û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {array[17]}\n"


def get_info_about_rank(array):
    admin_lvl = array[12]

    rank_standards = {
        "1": {"days": 13, "reports": 4000, "this_rank": "–ú–ª–∞–¥—à–µ–≥–æ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"},
        "2": {"days": 21, "reports": 8000, "this_rank": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"},
        "3": {"days": 50, "reports": 25000, "this_rank": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "next_rank": "–°—Ç–∞—Ä—à–µ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
    }

    if int(admin_lvl) < 4:
        reports = int(array[17]); up_date = int(array[18])
        punish = [int(array[14]), int(array[15]), int(array[16])]
        t = f"–° {rank_standards[admin_lvl]['this_rank']} –Ω–∞ {rank_standards[admin_lvl]['next_rank']}:"

        days_by_lvl = int(rank_standards[admin_lvl]['days'])
        reps_by_lvl = int(rank_standards[admin_lvl]['reports'])

        if days_by_lvl > up_date and reps_by_lvl > reports:
            return cfg.rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), (days_by_lvl - up_date), punish, 0, t)

        elif days_by_lvl > up_date and reps_by_lvl <= reports:
            return cfg.rank_up(reps_by_lvl, days_by_lvl, 0, (days_by_lvl - up_date), punish, 0, t)

        elif days_by_lvl <= up_date and reps_by_lvl > reports:
            return cfg.rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), 0, punish, 0, t)

        else:
            return cfg.rank_up(reps_by_lvl, days_by_lvl, (reps_by_lvl - reports), 0, punish, 1, t)

    else:
        return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω-—É—Ä–æ–≤–µ–Ω—å!"


def get_rank_standard(get_admin):
    post = get_admin[0]
    second = get_admin[1]

    rank_standards = {
        "–ú–ú": "–û—Ç–≤–µ—Ç—ã: 250 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 10 —à—Ç—É–∫",
        "–ú": "–û—Ç–≤–µ—Ç—ã: 200 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 10 —à—Ç—É–∫\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 2 —à—Ç—É–∫–∏",
        "–ú–ö": "–û—Ç–≤–µ—Ç—ã: 175 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 15 —à—Ç—É–∫\n–ü–æ—Å—Ç: –ó–∞ —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–µ–π",
        "–ú–§": "–û—Ç–≤–µ—Ç—ã: 150 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 120 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 10 —à—Ç—É–∫\n–§–æ—Ä—É–º: 10 –æ—Ç–≤–µ—Ç–æ–≤\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 1 —à—Ç—É–∫–∞",
        "–ú–ö&–ú–§": "–û—Ç–≤–µ—Ç—ã: 170 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 15 —à—Ç—É–∫\n–ü–æ—Å—Ç: –ó–∞ —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–µ–π\n–§–æ—Ä—É–º: 10 –æ—Ç–≤–µ—Ç–æ–≤\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 1 —à—Ç—É–∫–∞",
        "–ê": "–û—Ç–≤–µ—Ç—ã: 200 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 15 —à—Ç—É–∫\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 2 —à—Ç—É–∫–∏",
        "–°–ê": "–û—Ç–≤–µ—Ç—ã: 200 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 20 —à—Ç—É–∫\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 1 —à—Ç—É–∫–∞",
        "–ó–ì–°": "–û—Ç–≤–µ—Ç—ã: 120 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 130 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 10 —à—Ç—É–∫",
        "–ì–°": "–û—Ç–≤–µ—Ç—ã: 100 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç\n–ù–∞–∫–∞–∑–∞–Ω–∏–π: 5 —à—Ç—É–∫",
        "–ö": "–û—Ç–≤–µ—Ç—ã: 50 —à—Ç—É–∫\n–û–Ω–ª–∞–π–Ω: 150 –º–∏–Ω—É—Ç"
    }

    if post == "–ú–ª–∞–¥—à–∏–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä":
        standard = str(rank_standards['–ú–ú'])
    elif second == "–ú–§":
        standard = str(rank_standards['–ú–§'])
    elif "–ú–ö" in second and "–ú–§" in second:
        standard = str(rank_standards['–ú–ö&–ú–§'])
    elif "–ú–ö" in second:
        standard = str(rank_standards['–ú–ö'])
    elif post == "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä":
        standard = str(rank_standards['–ú'])
    elif post == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ":
        standard = str(rank_standards['–ê'])
    elif post == "–°—Ç–∞—Ä—à–∏–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        standard = str(rank_standards['–°–ê'])
    elif "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤–Ω–æ–≥–æ –°–ª–µ–¥—è—â–µ–≥–æ" in post:
        standard = str(rank_standards['–ó–ì–°'])
    elif "–ì–ª–∞–≤–Ω—ã–π –°–ª–µ–¥—è—â–∏–π" in post:
        standard = str(rank_standards['–ì–°'])
    else:
        standard = str(rank_standards['–ö'])

    return f"–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –Ω–æ—Ä–º–∞—Ç–∏–≤:\n{standard}"


vk_session = vk_api.VkApi(token=cfg.TOKEN)
lp = VkLongPoll(vk_session)
vk = vk_session.get_api()

while True:
    try:
        for event in lp.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                text = event.text
                user_id = event.user_id

                if access(user_id)[1] == 1 and text == "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                    line_id = access(user_id)[0]
                    values = sheet.row_values(line_id)
                    values_array = list(values)
                    sender(user_id, get_default_info(values_array))

                elif access(user_id)[1] == 1 and text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö":
                    line_id = access(user_id)[0]
                    values = sheet.row_values(line_id)
                    values_array = list(values)
                    sender(user_id, get_info_about_rank(values_array))

                elif access(user_id)[1] == 1 and text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞":
                    line_id = access(user_id)[0]
                    values = sheet.row_values(line_id)
                    values_array = list(values)
                    sender(user_id, get_rank_standard([values_array[2], values_array[3]]))

                elif event.text.lower() == "–Ω–∞—á–∞—Ç—å":
                    keyboard = VkKeyboard()
                    keyboard.add_button("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", VkKeyboardColor.POSITIVE)
                    keyboard.add_button("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞", VkKeyboardColor.PRIMARY)
                    keyboard.add_line()
                    keyboard.add_button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö", VkKeyboardColor.NEGATIVE)
                    vk_session.method("messages.send", {
                        "user_id": user_id,
                        "message": "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫...",
                        "random_id": 0,
                        "keyboard": keyboard.get_empty_keyboard()
                    })
                    time.sleep(0.25)
                    vk_session.method("messages.send", {
                        "user_id": user_id,
                        "message": "–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!",
                        "random_id": 0,
                        "keyboard": keyboard.get_keyboard()
                    })

                # –¥–ª—è —Ñ–∏–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
                elif event.text.lower() == "update_buttons" and user_id in cfg.DEV:
                    ids_column = sheet.col_values(7)
                    keyboard = VkKeyboard()
                    keyboard.add_button("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", VkKeyboardColor.POSITIVE)
                    keyboard.add_button("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞", VkKeyboardColor.PRIMARY)
                    keyboard.add_line()
                    keyboard.add_button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏—è—Ö", VkKeyboardColor.NEGATIVE)
                    for admin_id in ids_column:
                        try:
                            vk_session.method("messages.send", {
                                "user_id": admin_id,
                                "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫...",
                                "random_id": 0,
                                "keyboard": keyboard.get_empty_keyboard()
                            })
                            time.sleep(0.25)
                            vk_session.method("messages.send", {
                                "user_id": admin_id,
                                "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                                "random_id": 0,
                                "keyboard": keyboard.get_keyboard()
                            })

                        except:
                            pass

    except Exception as error:
        print(error)
